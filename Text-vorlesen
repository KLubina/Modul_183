Iiglittä

Ds Projekt isch e Webapplikation, wo mit em Spring Boot Framework in Java entwickelt worde isch. S goht um e Online-Shop für Teeprodukte, wo d Chunde sich chönne registriere, um verschideni Teesorte z chaufe. D Applikation implementiert Authentifizierung und Autorisierung mit JSON Web Tokens (JWT) und sorgt derfir, dass nur autoriesierti Benutzer uf bestimmti Funktione chönne zuegriffe. Im Folgende erkläre ich detailliert, wie ds Projekt funktioniert und wie es entstoh isch, so dass es de Vorgabe entspricht.

Registrierig und Authentifizierung

Benutzer chöi sich über dr Registrierigsendpunkt /users/register aaluege. Während dr Registrierig müend si persönlechi Informatione wie Vorname, Nachname, E-Mail, Passwort, Alter und Nationalität aage. Mir händ Validierungsmechanisme implementiert, um sicherzstelle, dass d iigähne Date korrekt sind:

    Validierig vom Alter: D Validierig passiert in dr Klass ValidAge (Annotation) und em AgeValidator. S Alter mues zwüsche 1 und 199 liege.
    Validierig vo dr Nationalität: D Klass ValidCountry (Annotation) und dr CountryValidator prüefe, ob s aagähni Land in dr Datebank existiert.

Nach ere erfolgriche Registrierig wird em Benutzer automatisch d Roll CLIENT zuegwiese, wo in dr Klass Role definiert isch, und er erhält dr Rang Silver us dr Klass Rank. D Passwörter werde mit em BCryptPasswordEncoder verschlüsslet, implementiert in dr Klass UserServiceImpl, um d Sicherheit vo dr Benutzerdaten z gewährleiste.

Für d Authentifizierung git s e Login-Endpunkt /users/login. Dr CustomAuthenticationFilter handlet d Aamäldig und generiert s JWT-Token. D Token enthält Informatione über d Rolle und Berechtigunge vom Benutzer, wo über dr UserDetailsImpl und sini Methode getAuthorities() bereitgstellt werde.

Rolle und Berechtigunge

S System bruucht es rollebasierends Zugriffskontrollmodell:

    Roll CLIENT: Definiert in dr Klass Role, wird allne neue Benutzer zuegwiese. Si het d folgende Berechtigunge, definiert in dr Klass Authority:
        CAN_PLACE_ORDER
        CAN_RETRIEVE_PURCHASE_HISTORY
        CAN_RETRIEVE_PRODUCTS

D Rolle und Berechtigunge sind in de Entitäte Role und Authority definiert und werde über d Klass RoleRepository und AuthorityRepository verwaltet. In dr Sicherheitskonfiguration WebSecurityConfig werde die Rolle und Berechtigunge bruucht, um dr Zugriff uf verschideni Endpunkte z steuere.

Produktbereitstellig

D verfüegbare Produkte sind verschideni Teesorte, wo in dr Datebank gspicheret sind:

    TeaType Entität: Definiert d Teesorte wie White, Green und Medical Herbs.
    Tea Entität: Repräsentiert d einzelne Teeprodukte mit Detail wie Name, Iikaufs- und Verkaufspreis sowie Erntedatum. D Verbindung zum TeaType passiert über e Many-to-One-Beziehig.

Benutzer chöi d verfüegbare Produkte über dr Endpunkt /products abruufe, implementiert im ProductController. D Methode getAllTeas() im TeaServiceImpl liefert d Liste vo verfüegbare Produkte. Dr Zugriff isch mit dr Berechtigung CAN_RETRIEVE_PRODUCTS gschützt.

Bestellprozess

Dr Bestellprozess wird im OrderController implementiert:

    Produktauswahl: Dr Benutzer git dr Name vom Tee und d Menge in Gramm im OrderDTO a.
    Altersprüefig: Im OrderController wird überprüeft, ob dr Benutzer alt gnueg isch, wenn er Medical Herbs chaufe wett.
    Preisberechnig: D Berechnig passiert im OrderController, wo dr Preis basierend uf dr Menge und em Verkaufspreis vo dr Tea Entität berechne wird.
    Rangrabatt: Dr aktuelle Rang vom Benutzer wird us dr User Entität ermittelt, und dr Rabatt wird aawendet.
    Seeds-Gutschrift: Dr Benutzer erhält Seeds gutgschriebe; d Logik dafir isch im OrderController implementiert.
    Rangaktualisierig: Über dr RankRepository wird geprüft, ob dr Benutzer gnueg Seeds für e Rangaufstieg het.

D Bestellig wird als Order Entität gspicheret, und dr Benutzer cha sini Bestellige über dr Methode getUserOrders() im OrderController abrüefe, wo UserOrderDTO-Objekte zrugg gibt.

Ränge und Seeds

D Ränge sind in dr Klass Rank definiert und werde über s RankRepository verwaltet. D Logik für d Aktualisierig vom Rang basiert uf dr Aazahl vo Seeds und isch im OrderController implementiert.

Validierige und Fehlermeldige

    Benutzerdefinierte Validierige:
        ValidAge Annotation und AgeValidator Klasse.
        ValidCountry Annotation und CountryValidator Klasse.
    Standardvalidierige: Verwendung vo @NotBlank, @Email, @Size in de DTO-Klasse wie UserRegisterDTO.
    Globali Ausnahmebehandlig: D Klass CustomGlobalExceptionHandler fangt Fehler ab und liefert verständlechi Meldige. D Fehlermeldige sind in de validationMessages*.properties Datei hinterlegt.

Sicherheitskonfiguration

    JWT-Authentifizierung und -Autorisierung:
        CustomAuthenticationFilter für s Login.
        CustomAuthorizationFilter für d Autorisierung bi jede Aafrog.
    Passwortverschlüsselig: Implementiert in dr UserServiceImpl Klass mit BCryptPasswordEncoder.
    Rollebasierendi Zugriffskontroll: Definiert in dr WebSecurityConfig Klass mit Methode wie authorizeHttpRequests.
    Sicherheitsfilterkette: Konfiguriert in dr WebSecurityConfig Klass.

Auditierig

    ExtendedAuditEntity: Basisklass für Entitäte mit Audit-Felder.
    UserAware: Stellt dr aktuälle Benutzer für d Auditierig zur Verfüegig.
    Konfiguration: Aktiviert in dr WebSecurityConfig mit @EnableJpaAuditing(auditorAwareRef = "userAware").

Datebankinitialisierig

    data.sql Skript: Enthält SQL-Befehle, wo d initiale Date wie Rolle, Berechtigunge, Länder, Ränge und Produkte in d Datebank lädt.
    Konfiguration: In dr application.properties mit spring.sql.init.mode=always aktiviert.

Klasse und ihri Funktione

Um ds Projekt gemäss dr Vorgabe fertig z stelle, sind folgende Klasse erstellt oder bearbeitet worde:

    UserController: Handlet d Registrierig, Aamäldig und Profilanzeig.
    UserService und UserServiceImpl: Geschäftslogik für d Benutzerverwaltig.
    User Entität: Repräsentiert dr Benutzer inkl. Attribute für Seeds und Rang.
    Role und Authority Entitäte: Definiert Rolle und Berechtigunge im System.
    OrderController: Implementiert dr Bestellprozess und d Logik für Preisberechnig, Rabatt und Seeds.
    Order Entität: Speichert Bestellige in dr Datebank.
    ProductController: Ermöglicht s Abrüefe vo Produkte.
    Tea und TeaType Entitäte: Modelliert d Produkte und ihri Sorte.
    Rank Entität: Definiert Ränge und erforderligi Seeds.
    JwtProperties: Enthält JWT-Konfigurationseigenschafte.
    WebSecurityConfig: Konfiguriert Sicherheitsaspekte wie Filter und Zugriffsbeschränkige.
    CustomAuthenticationFilter und CustomAuthorizationFilter: Verantwortlich für Authentifizierung und Autorisierung.
    UserMapper: Konvertiert zwüsche User und UserDTO mit MapStruct.
    ValidAge und ValidCountry: Benutzerdefiniereti Validierigsannotatione.
    UserAware: Stellt dr aktuälle Benutzer für d Auditierig zur Verfüegig.
    CustomGlobalExceptionHandler: Behandlet Fehler und liefert Fehlermeldige.

Schlusswort

Dure d Implementierig vo diese spezifische Klasse und d Anpassig vo bestehende Komponente isch ds Projekt gemäss dr Aufgabenstellig fertigstellt worde. S gewährleistet Sicherheit, Dateintegrität und Benutzerfreundlichkeit und erfüllt alli gestellte Anforderige.
