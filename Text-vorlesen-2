Einleitung

Dieses Projekt ist eine Webanwendung, entwickelt mit dem Spring Boot Framework in Java. Es handelt sich um einen Online-Shop für Teeprodukte, in dem Kunden sich registrieren können, um verschiedene Teesorten zu kaufen. Die Anwendung implementiert Authentifizierung und Autorisierung mittels JSON Web Tokens (JWT) und stellt sicher, dass nur autorisierte Benutzer auf bestimmte Funktionen zugreifen können. Im Folgenden erläutere ich detailliert, wie das Projekt entsprechend der Aufgabenstellung umgesetzt wurde, indem die Blöcke 1 bis 4 abgearbeitet und die einzelnen Schritte erklärt werden.

Block 1: Registrierung neuer Kunden

Die Registrierung neuer Kunden ist ein zentraler Bestandteil des Projekts. Die folgenden Schritte wurden umgesetzt:

    Implementierung der Registrierungsfunktionalität:
        Klasse: UserController
        Methode: registerUser(UserRegisterDTO userRegisterDTO)
        Beschreibung: Diese Methode empfängt die Registrierungsdaten vom Benutzer, validiert sie und erstellt einen neuen Benutzer in der Datenbank.

    Validierung der Benutzerdaten:
        Klasse: UserRegisterDTO
        Validierungsannotationen: @NotBlank, @Email, @Size, @ValidAge, @ValidCountry
        Beschreibung: Die Felder wie Vorname, Nachname, E-Mail, Passwort, Alter und Nationalität werden auf ihre Korrektheit überprüft. Benutzerdefinierte Validierungsannotationen wie @ValidAge und @ValidCountry stellen sicher, dass das Alter und das Land gültig sind.

    Speicherung des Benutzers und Zuweisung von Rollen und Rang:
        Klassen:
            UserServiceImpl für die Geschäftslogik der Benutzerverwaltung.
            RoleRepository zum Abrufen der Rolle CLIENT.
            RankRepository zum Abrufen des Anfangsrangs Silver.
        Beschreibung: Nach erfolgreicher Validierung wird der Benutzer in der Datenbank gespeichert. Ihm wird automatisch die Rolle CLIENT zugewiesen, und er erhält den Rang Silver.

    Passwortverschlüsselung:
        Klasse: UserServiceImpl
        Methode: register(User user)
        Beschreibung: Bevor der Benutzer gespeichert wird, wird sein Passwort mit BCryptPasswordEncoder verschlüsselt, um die Sicherheit der Daten zu gewährleisten.

    Auditierung der Benutzerdaten:
        Klasse: ExtendedAuditEntity
        Beschreibung: Die Felder createdAt, createdBy, modifiedAt und lastModifiedBy werden automatisch gefüllt, um Änderungen am Benutzer nachverfolgen zu können.

Block 2: Bereitstellung von Produkten

Die Bereitstellung der Teeprodukte für die Kunden wurde wie folgt umgesetzt:

    Modellierung der Teesorten und Produkte:
        Klassen:
            TeaType: Repräsentiert die Teesorten wie White, Green und Medical Herbs.
            Tea: Repräsentiert die einzelnen Teeprodukte mit Attributen wie Name, Einkaufs- und Verkaufspreis, Erntedatum und Verknüpfung zur Teesorte.
        Beschreibung: Die Beziehung zwischen Tea und TeaType ist eine Many-to-One-Beziehung.

    Implementierung des Produktendpunkts:
        Klasse: ProductController
        Methode: getAllTeas()
        Beschreibung: Diese Methode ermöglicht es Benutzern mit der Berechtigung CAN_RETRIEVE_PRODUCTS, alle verfügbaren Teeprodukte abzurufen.

    Sicherheitskonfiguration:
        Klasse: WebSecurityConfig
        Beschreibung: Der Zugriff auf den Produktendpunkt ist durch Sicherheitsregeln geschützt, sodass nur authentifizierte Benutzer mit der entsprechenden Berechtigung darauf zugreifen können.

Block 3: Kauf einzelner Produkte

Der Bestellprozess wurde detailliert implementiert, um den Kunden den Kauf von Teeprodukten zu ermöglichen:

    Implementierung des Bestellendpunkts:
        Klasse: OrderController
        Methode: createOrder(OrderDTO orderDTO)
        Beschreibung: Ermöglicht es Benutzern mit der Berechtigung CAN_PLACE_ORDER, eine Bestellung aufzugeben.

    Validierung der Bestelldaten:
        Klasse: OrderDTO
        Validierungsannotationen: @NotNull
        Beschreibung: Stellt sicher, dass alle erforderlichen Bestellinformationen vorhanden sind.

    Altersüberprüfung für bestimmte Teesorten:
        Klasse: OrderController
        Beschreibung: Wenn der Benutzer Medical Herbs bestellen möchte, wird überprüft, ob er mindestens 18 Jahre alt ist. Dies erfolgt durch die Prüfung des Altersfelds im Benutzerprofil.

    Preisberechnung und Anwendung von Rabatten:
        Klasse: OrderController
        Beschreibung:
            Der Gesamtpreis wird basierend auf der Menge und dem Verkaufspreis des Produkts berechnet.
            Wenn der Benutzer einen Rang besitzt, wird der entsprechende Rabatt auf den Preis angewendet. Die Ranginformationen werden aus der Rank-Entität des Benutzers abgerufen.

    Gutschrift von Seeds und Aktualisierung des Rangs:
        Klassen:
            OrderController für die Logik der Seed-Gutschrift.
            RankRepository für die Ermittlung des nächsten Rangs.
        Beschreibung:
            Für je 2 CHF, die der Benutzer ausgibt, erhält er einen Seed gutgeschrieben.
            Wenn der Benutzer genügend Seeds gesammelt hat, wird sein Rang automatisch erhöht.

    Speicherung der Bestellung:
        Klasse: OrderService
        Beschreibung: Die Bestellung wird in der Datenbank gespeichert, und der Benutzer kann seine Bestellhistorie abrufen.

Block 4: Anzeige der Bestellhistorie

Die Möglichkeit für Benutzer, ihre Bestellhistorie einzusehen, wurde wie folgt implementiert:

    Implementierung des Endpunkts zur Bestellhistorie:
        Klasse: OrderController
        Methode: getUserOrders()
        Beschreibung: Ermöglicht es Benutzern mit der Berechtigung CAN_RETRIEVE_PURCHASE_HISTORY, ihre vergangenen Bestellungen abzurufen.

    Datenaufbereitung für die Ausgabe:
        Klasse: UserOrderDTO
        Beschreibung: Dieses DTO enthält die relevanten Bestellinformationen, die an den Benutzer zurückgegeben werden, wie Bestell-ID, Teename, Menge, bezahlter Preis und Bestelldatum.

    Sicherheitskonfiguration:
        Klasse: WebSecurityConfig
        Beschreibung: Der Zugriff auf den Endpunkt zur Bestellhistorie ist durch entsprechende Berechtigungen geschützt.

Zusätzliche technische Details und verwendete Klassen

Um das Projekt vollständig entsprechend der Aufgabenstellung umzusetzen, wurden weitere Klassen erstellt und angepasst:

    User Entität:
        Beschreibung: Repräsentiert den Benutzer mit Attributen wie Vorname, Nachname, E-Mail, Passwort, Alter, Seeds und Rang.
        Beziehung zu anderen Entitäten: Hat Beziehungen zu Role, Rank und Country.

    Role und Authority Entitäten:
        Beschreibung: Definieren die Rollen und Berechtigungen im System.
        Verwendung: Über die Klassen RoleRepository und AuthorityRepository verwaltet.

    UserServiceImpl:
        Beschreibung: Implementiert die Geschäftslogik für die Benutzerverwaltung, einschließlich Registrierung und Passwortverschlüsselung.

    WebSecurityConfig:
        Beschreibung: Konfiguriert die Sicherheitsaspekte der Anwendung, einschließlich JWT-Authentifizierung, Passwortverschlüsselung und Zugriffskontrollen.

    CustomAuthenticationFilter und CustomAuthorizationFilter:
        Beschreibung: Verantwortlich für die Verarbeitung von Login-Anfragen und die Überprüfung von JWT-Tokens bei eingehenden Anfragen.

    ValidAge und ValidCountry Annotationen:
        Beschreibung: Benutzerdefinierte Validierungsannotationen zur Überprüfung des Alters und der Nationalität bei der Registrierung.

    UserMapper:
        Beschreibung: Verwendet MapStruct, um zwischen User-Entitäten und UserDTO zu konvertieren.

    CustomGlobalExceptionHandler:
        Beschreibung: Behandelt globale Ausnahmen und liefert benutzerfreundliche Fehlermeldungen.

    Datenbankinitialisierung:
        Beschreibung: Über SQL-Skripte werden initiale Daten wie Rollen, Berechtigungen, Länder, Ränge und Produkte in die Datenbank geladen.

Schlusswort

Durch die sorgfältige Umsetzung der Blöcke 1 bis 4 wurde das Projekt gemäß der Aufgabenstellung vollständig realisiert. Jede Komponente wurde mit Blick auf Sicherheit, Datenintegrität und Benutzerfreundlichkeit entwickelt. Die Verwendung von Best Practices und modernen Technologien wie Spring Boot, JWT und automatisierten Validierungen stellt sicher, dass die Anwendung robust, wartbar und erweiterbar ist. Die einzelnen Schritte wurden detailliert erläutert, um ein klares Verständnis der Funktionsweise und der implementierten Lösungen zu vermitteln.
